// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pri.Festivals.Infrastructure;

namespace Pri.Festivals.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationUserTicket", b =>
                {
                    b.Property<string>("ApplicationUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TicketsId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUsersId", "TicketsId");

                    b.HasIndex("TicketsId");

                    b.ToTable("ApplicationUserTicket");

                    b.HasData(
                        new
                        {
                            ApplicationUsersId = "4",
                            TicketsId = 2
                        },
                        new
                        {
                            ApplicationUsersId = "2",
                            TicketsId = 4
                        });
                });

            modelBuilder.Entity("ArtistFestival", b =>
                {
                    b.Property<int>("ArtistsId")
                        .HasColumnType("int");

                    b.Property<int>("FestivalsId")
                        .HasColumnType("int");

                    b.HasKey("ArtistsId", "FestivalsId");

                    b.HasIndex("FestivalsId");

                    b.ToTable("ArtistFestival");

                    b.HasData(
                        new
                        {
                            ArtistsId = 1,
                            FestivalsId = 1
                        },
                        new
                        {
                            ArtistsId = 2,
                            FestivalsId = 1
                        },
                        new
                        {
                            ArtistsId = 7,
                            FestivalsId = 1
                        },
                        new
                        {
                            ArtistsId = 8,
                            FestivalsId = 1
                        },
                        new
                        {
                            ArtistsId = 12,
                            FestivalsId = 1
                        },
                        new
                        {
                            ArtistsId = 4,
                            FestivalsId = 2
                        },
                        new
                        {
                            ArtistsId = 3,
                            FestivalsId = 2
                        },
                        new
                        {
                            ArtistsId = 7,
                            FestivalsId = 2
                        },
                        new
                        {
                            ArtistsId = 8,
                            FestivalsId = 2
                        },
                        new
                        {
                            ArtistsId = 5,
                            FestivalsId = 3
                        },
                        new
                        {
                            ArtistsId = 6,
                            FestivalsId = 3
                        },
                        new
                        {
                            ArtistsId = 4,
                            FestivalsId = 3
                        },
                        new
                        {
                            ArtistsId = 7,
                            FestivalsId = 4
                        },
                        new
                        {
                            ArtistsId = 8,
                            FestivalsId = 4
                        },
                        new
                        {
                            ArtistsId = 11,
                            FestivalsId = 4
                        },
                        new
                        {
                            ArtistsId = 12,
                            FestivalsId = 4
                        },
                        new
                        {
                            ArtistsId = 9,
                            FestivalsId = 5
                        },
                        new
                        {
                            ArtistsId = 10,
                            FestivalsId = 5
                        },
                        new
                        {
                            ArtistsId = 11,
                            FestivalsId = 6
                        },
                        new
                        {
                            ArtistsId = 12,
                            FestivalsId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "admin",
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "customer",
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "customer",
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "customer",
                            UserId = "4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Pri.Festivals.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            AddressLine = "Kruishoutemsesteenweg 36",
                            City = "Zingem",
                            ConcurrencyStamp = "1e940d21-12e9-4e53-a44a-d94b9ddb754a",
                            DateOfBirth = new DateTime(1996, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@festivals.com",
                            EmailConfirmed = true,
                            Firstname = "Yordi",
                            Lastname = "Van de Velde",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FESTIVALS.COM",
                            NormalizedUserName = "ADMIN@FESTIVALS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECq5O7k3RN2jQCXKXNMm1RtF/soMLbFwV46vOOOHz3VC9TKw3l9f7QJQq9K0KIgRnQ==",
                            PhoneNumberConfirmed = false,
                            PostalCode = "9750",
                            SecurityStamp = "3f83c1f8-ce8f-4c7d-bf1d-1b58ad675ba2",
                            TwoFactorEnabled = false,
                            UserName = "admin@festivals.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            AddressLine = "Gentstesteenweg 56",
                            City = "Gent",
                            ConcurrencyStamp = "289082f1-18f7-4973-b62b-e6f6f4d0aefc",
                            DateOfBirth = new DateTime(2000, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@festivals.com",
                            EmailConfirmed = true,
                            Firstname = "jules",
                            Lastname = "Van de Velde",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@FESTIVALS.COM",
                            NormalizedUserName = "USER@FESTIVALS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJRZj/5sOHdV5pokb87dCz22QRs2nPKv61ftjT6ZdM57CyqggXRvYn/+at9FV2afrw==",
                            PhoneNumberConfirmed = false,
                            PostalCode = "9000",
                            SecurityStamp = "e181e2c2-403d-4d93-a7f6-3978f8427cd0",
                            TwoFactorEnabled = false,
                            UserName = "user@festivals.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            AddressLine = "Antwerpselaan 5",
                            City = "Antwerpen",
                            ConcurrencyStamp = "0ab4bae4-b3a2-4271-be3b-25209752126c",
                            DateOfBirth = new DateTime(1990, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tom@festivals.com",
                            EmailConfirmed = true,
                            Firstname = "Tom",
                            Lastname = "Roels",
                            LockoutEnabled = false,
                            NormalizedEmail = "TOM@FESTIVALS.COM",
                            NormalizedUserName = "TOM@FESTIVALS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEeq0jbUjLlLiQGrb6dZlp3fze0ReaxLwK3GXsLFD2PrATlPo/nBDf+toJpfNUJ1CA==",
                            PhoneNumberConfirmed = false,
                            PostalCode = "2000",
                            SecurityStamp = "1d341350-a3c3-4ae6-a601-a06f06ca9df9",
                            TwoFactorEnabled = false,
                            UserName = "tom@festivals.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            AddressLine = " Drongsesteenweg 1",
                            City = "Drongen",
                            ConcurrencyStamp = "f749bf15-00bd-4cf0-a14f-c2d4f20fe8c8",
                            DateOfBirth = new DateTime(1997, 10, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "laura@festivals.com",
                            EmailConfirmed = true,
                            Firstname = "Laura",
                            Lastname = "De Waele",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAURA@FESTIVALS.COM",
                            NormalizedUserName = "LAURA@FESTIVALS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBcf3k+bXohd7+Ir/3LAQieFuHnxn5v7vWYhJwutQtfvDg/4R0r2HucMEMq5WrlN9A==",
                            PhoneNumberConfirmed = false,
                            PostalCode = "9031",
                            SecurityStamp = "29fd9cfe-728e-43af-ae9a-ce7fc48c2a71",
                            TwoFactorEnabled = false,
                            UserName = "laura@festivals.com"
                        });
                });

            modelBuilder.Entity("Pri.Festivals.Core.Entities.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreId = 1,
                            Image = "arminvb.jpg",
                            Name = "Armin van Buuren"
                        },
                        new
                        {
                            Id = 2,
                            GenreId = 1,
                            Image = "martin.jpg",
                            Name = "Martin Garrix"
                        },
                        new
                        {
                            Id = 3,
                            GenreId = 2,
                            Image = "wardrugs.jpg",
                            Name = "The war on drugs"
                        },
                        new
                        {
                            Id = 4,
                            GenreId = 2,
                            Image = "chili.jpg",
                            Name = "Red hot chili peppers"
                        },
                        new
                        {
                            Id = 5,
                            GenreId = 3,
                            Image = "drake.jpg",
                            Name = "Drake"
                        },
                        new
                        {
                            Id = 6,
                            GenreId = 3,
                            Image = "ye.jpg",
                            Name = "Ye"
                        },
                        new
                        {
                            Id = 7,
                            GenreId = 4,
                            Image = "charlotte.jpg",
                            Name = "Charlotte de Witte"
                        },
                        new
                        {
                            Id = 8,
                            GenreId = 4,
                            Image = "amelie.jpg",
                            Name = "Amelie Lense"
                        },
                        new
                        {
                            Id = 9,
                            GenreId = 5,
                            Image = "rammstein.jpg",
                            Name = "Rammstein"
                        },
                        new
                        {
                            Id = 10,
                            GenreId = 5,
                            Image = "iron.jpg",
                            Name = "Iron Maiden"
                        },
                        new
                        {
                            Id = 11,
                            GenreId = 6,
                            Image = "rebelion.jpg",
                            Name = "Rebelion"
                        },
                        new
                        {
                            Id = 12,
                            GenreId = 6,
                            Image = "sefa.jpg",
                            Name = "Sefa"
                        });
                });

            modelBuilder.Entity("Pri.Festivals.Core.Entities.Festival", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Festivals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Belgium's biggest dance festival",
                            EndDate = new DateTime(2022, 7, 19, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "tomorrowland.jpg",
                            LocationId = 1,
                            Name = "Tomorrowland",
                            OrganizerId = 1,
                            StartDate = new DateTime(2022, 7, 15, 6, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Pop and rock festival",
                            EndDate = new DateTime(2022, 7, 3, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "rock.jpg",
                            LocationId = 2,
                            Name = "Rock Werchter",
                            OrganizerId = 2,
                            StartDate = new DateTime(2022, 6, 30, 6, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "pop music festival",
                            EndDate = new DateTime(2022, 8, 21, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "pukkelpop.jpg",
                            LocationId = 3,
                            Name = "Pukkelpop",
                            OrganizerId = 3,
                            StartDate = new DateTime(2022, 8, 18, 6, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Description = "Escape into Happiness!",
                            EndDate = new DateTime(2022, 7, 26, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "sunrise.jpg",
                            LocationId = 4,
                            Name = "Sunrise festival",
                            OrganizerId = 4,
                            StartDate = new DateTime(2022, 6, 24, 6, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Description = "Graspop metal meeting",
                            EndDate = new DateTime(2022, 6, 19, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "graspop.jpg",
                            LocationId = 5,
                            Name = "Graspop",
                            OrganizerId = 5,
                            StartDate = new DateTime(2022, 6, 16, 6, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Description = "Breaking boundaries",
                            EndDate = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "qontinent.jpg",
                            LocationId = 6,
                            Name = "Qontinent",
                            OrganizerId = 6,
                            StartDate = new DateTime(2022, 8, 12, 6, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Pri.Festivals.Core.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Electronic dance music",
                            Name = "EDM"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Rock & roll , strong beat",
                            Name = "Rock"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Rap , r&b en funky music",
                            Name = "Hiphop"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Dance music with electronic instruments",
                            Name = "Techno"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Intense and powerful",
                            Name = "Metal"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Bpm range from 140 to 180",
                            Name = "Hard dance"
                        });
                });

            modelBuilder.Entity("Pri.Festivals.Core.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Postal")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Boom",
                            Name = "PRC de Schorre",
                            Postal = "2850"
                        },
                        new
                        {
                            Id = 2,
                            City = "Werchter",
                            Name = "Haachsesteenweg",
                            Postal = "3118"
                        },
                        new
                        {
                            Id = 3,
                            City = "Hasselt",
                            Name = "Kempische Steenweg",
                            Postal = "3500"
                        },
                        new
                        {
                            Id = 4,
                            City = "Gierle",
                            Name = "Beersebaan",
                            Postal = "2275"
                        },
                        new
                        {
                            Id = 5,
                            City = "Dessel",
                            Name = "Kastelsedijk",
                            Postal = "2480"
                        },
                        new
                        {
                            Id = 6,
                            City = "Wachtebeke",
                            Name = "provinciaal domein",
                            Postal = "9185"
                        });
                });

            modelBuilder.Entity("Pri.Festivals.Core.Entities.Organizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Organizers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "We Are One World"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Herman Schueremans"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chokri Mahassine"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sunrise Festival"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Peter Van Geel"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bass events"
                        });
                });

            modelBuilder.Entity("Pri.Festivals.Core.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Available")
                        .HasColumnType("int");

                    b.Property<int>("FestivalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TicketsSold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FestivalId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = 0,
                            FestivalId = 1,
                            Name = "Full Madness Pass",
                            Price = 293m,
                            TicketsSold = 400000
                        },
                        new
                        {
                            Id = 2,
                            Available = 15000,
                            FestivalId = 2,
                            Name = "Rock werchter Weekend",
                            Price = 243m,
                            TicketsSold = 15000
                        },
                        new
                        {
                            Id = 3,
                            Available = 20000,
                            FestivalId = 3,
                            Name = "Pukkelpop combi ticket",
                            Price = 245m,
                            TicketsSold = 2500
                        },
                        new
                        {
                            Id = 4,
                            Available = 12000,
                            FestivalId = 3,
                            Name = "Pukkelop day ticket",
                            Price = 115m,
                            TicketsSold = 0
                        },
                        new
                        {
                            Id = 5,
                            Available = 10000,
                            FestivalId = 4,
                            Name = "Sunrise Weekend ticket ",
                            Price = 120m,
                            TicketsSold = 1555
                        },
                        new
                        {
                            Id = 6,
                            Available = 10000,
                            FestivalId = 4,
                            Name = "Sunrise sunday ticket ",
                            Price = 60.99m,
                            TicketsSold = 1555
                        },
                        new
                        {
                            Id = 7,
                            Available = 12000,
                            FestivalId = 5,
                            Name = "Graspop Weekend ticket ",
                            Price = 55.50m,
                            TicketsSold = 1450
                        },
                        new
                        {
                            Id = 8,
                            Available = 500,
                            FestivalId = 6,
                            Name = "Qontinent Vip Ticket",
                            Price = 175m,
                            TicketsSold = 200
                        },
                        new
                        {
                            Id = 9,
                            Available = 15000,
                            FestivalId = 6,
                            Name = "Qontinent weekend Ticket",
                            Price = 120m,
                            TicketsSold = 5000
                        });
                });

            modelBuilder.Entity("ApplicationUserTicket", b =>
                {
                    b.HasOne("Pri.Festivals.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ApplicationUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pri.Festivals.Core.Entities.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistFestival", b =>
                {
                    b.HasOne("Pri.Festivals.Core.Entities.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pri.Festivals.Core.Entities.Festival", null)
                        .WithMany()
                        .HasForeignKey("FestivalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Pri.Festivals.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Pri.Festivals.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pri.Festivals.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Pri.Festivals.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pri.Festivals.Core.Entities.Artist", b =>
                {
                    b.HasOne("Pri.Festivals.Core.Entities.Genre", "Genre")
                        .WithMany("Artists")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Pri.Festivals.Core.Entities.Festival", b =>
                {
                    b.HasOne("Pri.Festivals.Core.Entities.Location", "Location")
                        .WithMany("Festivals")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pri.Festivals.Core.Entities.Organizer", "Organizer")
                        .WithMany("Festivals")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("Pri.Festivals.Core.Entities.Ticket", b =>
                {
                    b.HasOne("Pri.Festivals.Core.Entities.Festival", "Festival")
                        .WithMany("Tickets")
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Festival");
                });

            modelBuilder.Entity("Pri.Festivals.Core.Entities.Festival", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Pri.Festivals.Core.Entities.Genre", b =>
                {
                    b.Navigation("Artists");
                });

            modelBuilder.Entity("Pri.Festivals.Core.Entities.Location", b =>
                {
                    b.Navigation("Festivals");
                });

            modelBuilder.Entity("Pri.Festivals.Core.Entities.Organizer", b =>
                {
                    b.Navigation("Festivals");
                });
#pragma warning restore 612, 618
        }
    }
}
